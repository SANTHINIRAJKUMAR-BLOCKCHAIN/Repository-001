buildscript {
    // Our version: bump this on release.
    ext.corda_version = "0.7-SNAPSHOT"
    ext.gradle_plugins_version = "0.6.1"

    ext.kotlin_version = '1.0.5'
    ext.quasar_version = '0.7.6'
    ext.asm_version = '0.5.3'
    ext.artemis_version = '1.4.0'
    ext.jackson_version = '2.8.0.rc2'
    ext.jetty_version = '9.3.9.v20160517'
    ext.jersey_version = '2.23.1'
    ext.jolokia_version = '2.0.0-M1'
    ext.assertj_version = '3.5.1'
    ext.log4j_version = '2.6.2'
    ext.bouncycastle_version = '1.54'

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        // TODO: Remove this once all packages are published to jcenter or maven central. (M6 or 7).
        maven {
            url  "http://r3.bintray.com/corda"
        }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.4'
        classpath "net.corda.plugins:publish-utils:$gradle_plugins_version"
        classpath "net.corda.plugins:quasar-utils:$gradle_plugins_version"
        classpath "net.corda.plugins:cordformation:$gradle_plugins_version"

        // Can run 'gradle dependencyUpdates' to find new versions of things.
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.12.0'
    }
}

plugins {
    // TODO The capsule plugin requires the newer DSL plugin block.It would be nice if we could unify all the plugins into one style,
    // but the DSL has some restrictions e.g can't be used on the allprojects section. So we should revisit this if there are improvements in Gradle.
    id "us.kirchmeier.capsule" version "1.0.2"
}

apply plugin: 'kotlin'
apply plugin: 'project-report'
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'maven-publish'
apply plugin: 'net.corda.plugins.quasar-utils'
apply plugin: 'net.corda.plugins.cordformation'

// We need the following three lines even though they're inside an allprojects {} block below because otherwise
// IntelliJ gets confused when importing the project and ends up erasing and recreating the .idea directory, along
// with the run configurations. It also doesn't realise that the project is a Java 8 project and misconfigures
// the resulting import. This fixes it.
apply plugin: 'java'
sourceCompatibility = 1.8
targetCompatibility = 1.8


allprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation" << "-Xlint:-options"
    }

    group 'net.corda'
    version "$corda_version"
}

// Check that we are running on a Java 8 JDK. The source/targetCompatibility values above aren't sufficient to
// guarantee this because those are properties checked by the Java plugin, but we're using Kotlin.
//
// We recommend a specific minor version (unfortunately, not checkable directly) because JavaFX adds APIs in
// minor releases, so we can't work with just any Java 8, it has to be a recent one.
if (!JavaVersion.current().java8Compatible)
    throw new GradleException("Corda requires Java 8, please upgrade to at least 1.8.0_112")

repositories {
    mavenCentral()
    jcenter()
    maven {
        url 'https://dl.bintray.com/kotlin/exposed'
    }
}

// Required for building out the fat JAR.
dependencies {
    compile project(':node')
    compile "com.google.guava:guava:19.0"
    runtime project(path: ":node", configuration: 'runtimeArtifacts')
}

task jacocoRootReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
    dependsOn = subprojects.test
    additionalSourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories = files(subprojects.sourceSets.main.output)
    executionData = files(subprojects.jacocoTestReport.executionData)
    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
    }
    onlyIf = {
        true
    }
    doFirst {
        executionData = files(executionData.findAll {
            it.exists()
        })
    }
}

tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
}

task deployNodes(type: net.corda.plugins.Cordform, dependsOn: ['build']) {
    directory "./build/nodes"
    networkMap "Controller"
    node {
        name "Controller"
        dirName "controller"
        nearestCity "London"
        advertisedServices = ["corda.notary.validating"]
        artemisPort 10002
        webPort 10003
        cordapps = []
    }
    node {
        name "Bank A"
        dirName "nodea"
        nearestCity "London"
        advertisedServices = []
        artemisPort 10004
        webPort 10005
        cordapps = []
    }
    node {
        name "Bank B"
        dirName "nodeb"
        nearestCity "New York"
        advertisedServices = []
        artemisPort 10006
        webPort 10007
        cordapps = []
    }
}

// Aliasing the publishToMavenLocal for simplicity.
task(install, dependsOn: 'publishToMavenLocal')
 
 
