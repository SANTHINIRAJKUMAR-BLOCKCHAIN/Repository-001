@Library('corda-shared-build-pipeline-steps')
import static com.r3.build.BuildControl.killAllExistingBuildsForJob

killAllExistingBuildsForJob(env.JOB_NAME, env.BUILD_NUMBER.toInteger())

pipeline {
    agent {
        dockerfile {
            filename '.ci/dev/compatibility/DockerfileJDK11Compile'
            label 'k8s'
        }
    }
    options {
        timestamps()
        timeout(time: 3, unit: 'HOURS')
    }

    environment {
        PR_CONTEXT_STRING = "PR JDK 11 Compatibility Compilation"
        DOCKER_CREDENTIALS_USR = "stefanotestingcr"
        DOCKER_CREDENTIALS_PWD = credentials('container_reg_passwd')
    }

    stages {
        stage('Docker authentication') {
            steps {
                sh "docker login --username \"\${DOCKER_CREDENTIALS_USR}\" --password \"\${DOCKER_PUSH_PWD}\""
            }
        }
        stage('JDK 11 Compile') {
            steps {
                script {
                    pullRequest.createStatus(
                            status: 'pending',
                            context: "${PR_CONTEXT_STRING}",
                            description: "Compiling against JDK 11",
                            targetUrl: "${env.BUILD_URL}")
                }
                sh "./gradlew --no-daemon clean compileAll"
            }
        }
    }

    post {
        success {
            script {
                pullRequest.createStatus(
                        status: 'success',
                        context: "${PR_CONTEXT_STRING}",
                        description: 'Compilation successful',
                        targetUrl: "${env.BUILD_URL}")
            }
        }

        failure {
            script {
                pullRequest.createStatus(
                        status: 'failure',
                        context: "${PR_CONTEXT_STRING}",
                        description: 'Compilation failed',
                        targetUrl: "${env.BUILD_URL}")
            }
        }
        cleanup {
            deleteDir() /* clean up our workspace */
        }
    }
}
