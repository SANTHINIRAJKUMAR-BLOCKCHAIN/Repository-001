@Library('corda-shared-build-pipeline-steps')
import static com.r3.build.BuildControl.killAllExistingBuildsForJob

killAllExistingBuildsForJob(env.JOB_NAME, env.BUILD_NUMBER.toInteger())

pipeline {
    agent {
        docker {
                image "build-zulu-openjdk:17"
                label "standard"
                registryUrl 'https://engineering-docker.software.r3.com/'
                registryCredentialsId 'artifactory-credentials'
                // Used to mount storage from the host as a volume to persist the cache between builds
                args '-v /tmp:/host_tmp'
                alwaysPull true
        }
    }

    options {
        timestamps()
        timeout(time: 3, unit: 'HOURS')
        buildDiscarder(logRotator(daysToKeepStr: '14', artifactDaysToKeepStr: '14'))
    }

    /*
     * List environment variables in alphabetical order
     */
    environment {
        SNYK_API_TOKEN = credentials('c4-os-snyk-api-token-secret')
        C4_OS_SNYK_ORG_ID = credentials('c4-os-snyk-org-id')
        GRADLE_USER_HOME = "/host_tmp/gradle"
    }

    stages {
        stage('Detekt check') {
            steps {
                authenticateGradleWrapper()
                sh "./gradlew --no-daemon clean detekt"
            }
        }

        stage('Compilation warnings check') {
            steps {
                /*
                 * TODO JDK17: Reset warningsAsErrors=true once all warnings have been fixed.
                 */
                sh "./gradlew --no-daemon -Pcompilation.warningsAsErrors=false compileAll"
            }
        }

        stage('Snyk Delta') {
            steps {
                authenticateGradleWrapper()
                sh 'mkdir -p ${GRADLE_USER_HOME}'
                authenticateGradleWrapper()
                snykDeltaScan(env.SNYK_API_TOKEN, env.C4_OS_SNYK_ORG_ID)
            }
        }

        stage('No API change check') {
            steps {
                sh "./gradlew --no-daemon generateApi"
                sh ".ci/check-api-changes.sh"
            }
        }

        stage('Deploy Nodes') {
            steps {
                sh "./gradlew --no-daemon jar deployNodes"
            }
        }
    }

    post {
        cleanup {
            deleteDir() /* clean up our workspace */
        }
    }
}
