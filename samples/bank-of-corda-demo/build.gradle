apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'idea'
apply plugin: 'net.corda.plugins.quasar-utils'
apply plugin: 'net.corda.plugins.publish-utils'
apply plugin: 'net.corda.plugins.cordapp'
apply plugin: 'net.corda.plugins.cordformation'
apply plugin: 'maven-publish'

sourceSets {
    integrationTest {
        kotlin {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/kotlin')
        }
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    // The bank of corda CorDapp depends upon Cash CorDapp features
    cordapp project(':finance')

    // Corda integration dependencies
    cordaCompile project(path: ":node:capsule", configuration: 'runtimeArtifacts')
    cordaCompile project(path: ":webserver:webcapsule", configuration: 'runtimeArtifacts')
    cordaCompile project(':core')
    cordaCompile project(':client:jfx')
    cordaCompile project(':client:rpc')
    cordaCompile project(':webserver')
    cordaCompile project(':node-driver')

    // Javax is required for webapis
    compile "org.glassfish.jersey.core:jersey-server:${jersey_version}"

    // Cordapp dependencies
    // Specify your cordapp's dependencies below, including dependent cordapps

    // Test dependencies
    testCompile "junit:junit:$junit_version"
}

task deployNodes(type: net.corda.plugins.Cordform, dependsOn: ['jar']) {
    node {
        name "O=Notary Service,L=Zurich,C=CH"
        notary = [validating: true]
        p2pPort 10002
        rpcSettings {
            address "localhost:10003"
            adminAddress "localhost:10004"
        }
        cordapp project(':finance')
        extraConfig = [h2Settings: [address: "localhost:10016"]]
    }
    node {
        name "O=BankOfCorda,L=London,C=GB"
        p2pPort 10005
        rpcSettings {
            address "localhost:10006"
            adminAddress "localhost:10015"
        }
        webPort 10007
        rpcUsers = [[user: "bankUser", password: "test", permissions: ["ALL"]]]
        cordapp project(':finance')
        extraConfig = [
                custom    : [issuableCurrencies: ["USD"]],
                h2Settings: [address: "localhost:10017"]
        ]
    }
    node {
        name "O=BigCorporation,L=New York,C=US"
        p2pPort 10008
        rpcSettings {
            address "localhost:10009"
            adminAddress "localhost:10011"
        }
        webPort 10010
        rpcUsers = [[user: "bigCorpUser", password: "test", permissions: ["ALL"]]]
        cordapp project(':finance')
        extraConfig = [
                h2Settings: [address: "localhost:10018"]
        ]
    }
}

task integrationTest(type: Test, dependsOn: []) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
}

idea {
    module {
        downloadJavadoc = true // defaults to false
        downloadSources = true
    }
}

publishing {
    publications {
        jarAndSources(MavenPublication) {
            from components.java
            artifactId 'bankofcorda'

            artifact sourceJar
            artifact javadocJar
        }
    }
}

task runRPCCashIssue(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'net.corda.bank.IssueCash'
    args '--role'
    args 'ISSUE_CASH_RPC'
    args '--quantity'
    args 20000
    args '--currency'
    args 'USD'
}

task runWebCashIssue(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'net.corda.bank.IssueCash'
    args '--role'
    args 'ISSUE_CASH_WEB'
    args '--quantity'
    args 30000
    args '--currency'
    args 'GBP'
}

jar {
    manifest {
        attributes(
                'Automatic-Module-Name': 'net.corda.samples.demos.bankofcorda'
        )
    }
}
