import net.corda.plugins.Cordform

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'idea'
apply plugin: 'net.corda.plugins.quasar-utils'
apply plugin: 'net.corda.plugins.publish-utils'
apply plugin: 'net.corda.plugins.cordformation'
apply plugin: 'maven-publish'

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

dependencies {
    compile project(path: ":node:capsule", configuration: 'runtimeArtifacts')
    compile project(path: ":webserver:webcapsule", configuration: 'runtimeArtifacts')
    compile project(':core')
    testCompile project(':test-utils')
}

idea {
    module {
        downloadJavadoc = true // defaults to false
        downloadSources = true
    }
}

publishing {
    publications {
        jarAndSources(MavenPublication) {
            from components.java
            artifactId 'notarydemo'

            artifact sourceJar
            artifact javadocJar
        }
    }
}

task deployNodes(dependsOn: ['deployNodesSingle', 'deployNodesRaft', 'deployNodesBFT'])

task deployNodesSingle(type: Cordform, dependsOn: ['jar', 'testClasses']) {
    directory "./build/nodes/nodesSingle"
    definitionClass = 'net.corda.notarydemo.SingleNotaryCordform'
}

task deployNodesRaft(type: Cordform, dependsOn: ['jar', 'testClasses']) {
    directory "./build/nodes/nodesRaft"
    definitionClass = 'net.corda.notarydemo.RaftNotaryCordform'
}

task deployNodesBFT(type: Cordform, dependsOn: ['jar', 'testClasses']) {
    directory "./build/nodes/nodesBFT"
    definitionClass = 'net.corda.notarydemo.BFTNotaryCordform'
}

task notarise(type: JavaExec) {
    classpath = sourceSets.test.runtimeClasspath
    main = 'net.corda.notarydemo.NotariseKt'
}
