buildscript {
    ext.commonsio_version = '2.6'
    ext.commonslogging_version = '1.2'
    ext.cucumber_version = '1.2.5'
    ext.crash_version = 'cce5a00f114343c1145c1d7756e1dd6df3ea984e'
    ext.docker_client_version = '8.11.0'
    ext.kubernetes_client_version = '0.2'

    repositories {
        mavenLocal()
        maven {
            jcenter()
            url 'https://jitpack.io'
        }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

group 'net.corda.behave'

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'maven-publish'

sourceCompatibility = 1.8

repositories {
    mavenLocal()
    mavenCentral()
}

sourceSets {
    behave {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDirs = ["src/main/kotlin", "src/scenario/kotlin"]
        }
    }
    scenario {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir file('src/scenario/kotlin')
        }
        resources {
            srcDirs = ['src/scenario/resources',
                       'src/qa-scenarios/resources']
        }
    }
    smokeTest {
        kotlin {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir file('src/smoke-test/kotlin')
        }
    }
    rpcProxy {
        kotlin {
            srcDir "src/main/kotlin"
        }
        resources {
            srcDir "config/dev"
        }
    }
}

configurations {
//    apiCompile.extendsFrom testCompile
//    apiRuntime.extendsFrom testRuntime

    scenarioCompile.extendsFrom testCompile
    scenarioRuntime.extendsFrom testRuntime

    behaveCompile.extendsFrom scenarioCompile
    behaveRuntime.extendsFrom testRuntime

    smokeTestCompile.extendsFrom compile
    smokeTestRuntime.extendsFrom runtime

    apideps

    extraLibs
}

dependencies {

    // Library

    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    compile("com.github.corda.crash:crash.shell:$crash_version") {
        exclude group: "org.slf4j", module: "slf4j-jdk14"
        exclude group: "org.bouncycastle"
    }

    compile("com.github.corda.crash:crash.connectors.ssh:$crash_version") {
        exclude group: "org.slf4j", module: "slf4j-jdk14"
        exclude group: "org.bouncycastle"
    }

    compile "org.slf4j:log4j-over-slf4j:$slf4j_version"
    compile "org.slf4j:jul-to-slf4j:$slf4j_version"
    compile "org.apache.logging.log4j:log4j-slf4j-impl:$log4j_version"
    compile "org.apache.logging.log4j:log4j-core:$log4j_version"

    extraLibs "commons-io:commons-io:$commonsio_version"
    compile "commons-logging:commons-logging:$commonslogging_version"
    compile "com.spotify:docker-client:$docker_client_version"
    compile "io.kubernetes:client-java:$kubernetes_client_version"
    compile "io.reactivex:rxjava:$rxjava_version"

    compile project(':finance')
    compileOnly project(':node-api')
    compileOnly project(':client:rpc')

    // includes jetty/jersey dependencies used by RPCProxyServer
    compile project(':webserver')

    apideps "net.corda:corda-rpc:$corda_release_version"

    testCompile project(':test-utils')

    // Unit Tests

    testCompile "junit:junit:$junit_version"
    testCompile "org.assertj:assertj-core:$assertj_version"

    // Scenarios / End-to-End Tests

    scenarioCompile "info.cukes:cucumber-java8:$cucumber_version"
    scenarioCompile "info.cukes:cucumber-junit:$cucumber_version"
    scenarioCompile "info.cukes:cucumber-picocontainer:$cucumber_version"
    scenarioCompile "org.reflections:reflections:0.9.9-RC2"

    // Smoke tests
    smokeTestCompile "org.assertj:assertj-core:${assertj_version}"
    smokeTestCompile "junit:junit:$junit_version"

    // Jetty http server
    rpcProxyCompile "org.eclipse.jetty:jetty-servlet:$jetty_version"
    rpcProxyCompile "org.eclipse.jetty:jetty-webapp:$jetty_version"
    rpcProxyCompile "javax.servlet:javax.servlet-api:3.1.0"

    // Jersey for JAX-RS implementation for use in Jetty
    rpcProxyCompile "org.glassfish.jersey.core:jersey-server:$jersey_version"
    rpcProxyCompile "org.glassfish.jersey.containers:jersey-container-servlet-core:$jersey_version"
    rpcProxyCompile "org.glassfish.jersey.containers:jersey-container-jetty-http:$jersey_version"

}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

compileScenarioKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

test {
    testLogging.showStandardStreams = true
}

task scenarios(type: Test) {
    setTestClassesDirs sourceSets.scenario.output.getClassesDirs()
    classpath = sourceSets.scenario.runtimeClasspath
    outputs.upToDateWhen { false }

    if (project.hasProperty("tags")) {
        systemProperty "cucumber.options", "--tags $tags"
        logger.warn("Only running tests tagged with: $tags ...")
    }
}

task smokeTest(type: Test) {
    testClassesDirs = sourceSets.smokeTest.output.classesDirs
    classpath = sourceSets.smokeTest.runtimeClasspath
}

task rpcProxyJar(type: Jar) {
    baseName "corda-rpcProxy"
    from {
        configurations.rpcProxyRuntime.collect { it.isDirectory() ? it : zipTree(it) }
    }
    with jar
    exclude("META-INF/*.DSA")
    exclude("META-INF/*.RSA")
    exclude("META-INF/*.SF")
    manifest {
        attributes 'Main-Class': 'net.corda.behave.service.proxy.RPCProxyServerKt'
    }
}

task behaveJar(type: Jar) {
    baseName "corda-behave"
    from sourceSets.behave.output
    from {
        configurations.behaveCompile.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
    zip64 true
    exclude("META-INF/*.DSA")
    exclude("META-INF/*.RSA")
    exclude("META-INF/*.SF")
    manifest {
        attributes 'Main-Class': 'net.corda.behave.scenarios.ScenarioRunner'
    }
}

jar {
    from {
        configurations.extraLibs.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

task apiJar(type: Jar, dependsOn: classes) {
    baseName "corda-behave-api"
    from sourceSets.scenario.output
    from {
        configurations.scenarioCompile.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
    from project(':client:rpc').configurations.compile.collect { zipTree it }
    with jar
    include 'net/corda/behave/scenarios/**'
    include 'cucumber/**'
    include 'org/reflections/**'
    exclude '**/features/**'
    exclude '**/scripts/**'
}

publishing {
    publications {
        api(MavenPublication) {
            artifactId 'corda-behave-api'
            artifact apiJar
        }
    }
}

//scenarios.mustRunAfter test
//scenarios.dependsOn test