apply plugin: 'kotlin'
apply plugin: 'net.corda.plugins.quasar-utils'
apply plugin: 'net.corda.plugins.publish-utils'

description 'Corda verifier'

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    maven {
        url 'http://oss.sonatype.org/content/repositories/snapshots'
    }
    maven {
        url 'https://dl.bintray.com/kotlin/exposed'
    }
}

//noinspection GroovyAssignabilityCheck
configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

sourceSets {
    integrationTest {
        kotlin {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/kotlin')
        }
    }
    test {
        resources {
            srcDir "../config/test"
        }
    }
    main {
        resources {
            srcDir "../config/dev"
        }
    }
}

dependencies {
    compile project(":node-api")

    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    compile "org.jetbrains.kotlinx:kotlinx-support-jdk8:0.3"
    testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    compile "org.apache.activemq:artemis-core-client:${artemis_version}"

    // Log4J: logging framework (with SLF4J bindings)
    compile "org.apache.logging.log4j:log4j-slf4j-impl:${log4j_version}"
    compile "org.apache.logging.log4j:log4j-core:${log4j_version}"

    integrationTestCompile project(":test-utils")
    integrationTestCompile project(":client:mock")

    // Integration test helpers
    integrationTestCompile "junit:junit:$junit_version"

    integrationTestCompile "org.apache.activemq:artemis-server:${artemis_version}"
}

configurations.compile {
    // We want to use SLF4J's version of these bindings: jcl-over-slf4j
    // Remove any transitive dependency on Apache's version.
    exclude group: 'commons-logging', module: 'commons-logging'
}

task standaloneJar(type: Jar) {
    // Create a fat jar by packing all deps into the output
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
    exclude("META-INF/*.DSA")
    exclude("META-INF/*.RSA")
    exclude("META-INF/*.SF")
    manifest {
        attributes 'Main-Class': 'net.corda.verifier.Verifier'
    }
    archiveName "corda-verifier.jar"
}

task integrationTest(type: Test) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
}
